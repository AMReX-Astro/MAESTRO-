"""
This script rewrites the filelist.rst file autogenerated by breathe to organize
the files in the documentation's API into the same directory structure as their
counterparts in the ../Source directory.
s
Note that we are not going to include cpp files - doxygen assumes that functions
are documented in the header files, so that's what we'll assume here as well.
"""

import os
import re

# directory of the source files
rootdir = "../Source"

outfile_path = "source/filelist.rst"

with open(outfile_path, 'w') as outfile:

    output_data = """File list
=========

.. toctree::
   :maxdepth: 2

   """

   # first iterate over subdirectories

    for subdir in sorted(os.listdir(rootdir)):
        if not os.path.isdir(os.path.join(rootdir, subdir)) or subdir == "param":
            continue

        output_data += f"""{subdir}_files
   """
        subdir_file_name = f"source/{subdir}_files.rst"

        with open(subdir_file_name, 'w') as subdir_file:

            subdir_output_data = f"{subdir.capitalize()}\n"
            subdir_output_data += "=" * len(subdir)
            subdir_output_data += """

.. toctree::
   :maxdepth: 2

   """

            for f in sorted(os.listdir(os.path.join(rootdir, subdir))):
                # do nothing if the file is not a fortran/header file
                if (f[-4:] != ".F90" and f[-4:] != ".f90" and f[-2:] != ".H" or f[-3:] == "F.H"):
                    continue

                rst_name = re.sub("_", "__", f)
                rst_name = re.sub("\.", "_8", rst_name)

                subdir_output_data += f"""file/{rst_name}
   """

            subdir_file.write(subdir_output_data)

    # now iterate over files in rootdir
    for f in sorted(os.listdir(rootdir)):
        # do nothing if the file is not a fortran/header file
        if (f[-4:] != ".F90" and f[-4:] != ".f90" and f[-2:] != ".H" or f[-3:] == "F.H"):
           continue

        rst_name = re.sub("_", "__", f)
        rst_name = re.sub("\.", "_8", rst_name)

        output_data += f"""file/{rst_name}
   """

    outfile.write(output_data)
